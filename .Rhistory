# Validation
#Validasi Menggunakan Confussion Matrix
confknn <- table(df_norm2_test_target$alamat_rumah, knnmodel)
confknn
# -----------------K-NN-------------------------------
# Data preprocessing
df_clean <- mutate_if(df_clean, is.factor, as.numeric)
#Membuat fungsi Normalisasi
normalize<-function(x){
temp<-(x-min(x))/(max(x)-min(x))
return(temp)
}
#Melakukan Normalisasi
df_norm<-as.data.frame(lapply(df_clean[,-1],normalize))
df_norm2<-bind_cols(df_clean[,1],df_norm)
df_norm2
#Membagi ke Data Train dan Data Testing
index_train <- sample(1:nrow(df_norm2), 0.7 * nrow(df_norm2))
df_norm2_test <- df_norm2[-index_train, ]
df_norm2_train <- df_norm2[index_train, ]
#Mengambil Label
df_norm2_train_target<-df_norm2_train[ ,1]
df_norm2_test_target<-df_norm2_test[ ,1]
knnmodel
# Validation
#Validasi Menggunakan Confussion Matrix
confknn <- table(df_norm2_test_target$alamat_rumah, knnmodel)
confknn
#Membuat KNN-Model dengan Nilai K=3
knnmodel <-knn(train=df_norm2_train,test=df_norm2_test,
cl=as.matrix(df_norm2_train_target,k=3))
# akurasi
acck <- mean(knnmodel==df_norm2_test_target$alamat_rumah)
acck
# Validation
#Validasi Menggunakan Confussion Matrix
confknn <- table(df_norm2_test_target$alamat_rumah, knnmodel)
confknn
#Membuat KNN-Model dengan Nilai K=3
knnmodel <-knn(train=df_norm2_train,test=df_norm2_test,
cl=as.matrix(df_norm2_train_target,k=3))
knnmodel
# Validation
#Validasi Menggunakan Confussion Matrix
confknn <- table(df_norm2_test_target$alamat_rumah, knnmodel)
confknn
# akurasi
acck <- mean(knnmodel==df_norm2_test_target$alamat_rumah)
acck
#Membuat KNN-Model dengan Nilai K=3
knnmodel <-knn(train=df_norm2_train,test=df_norm2_test,
cl=as.matrix(df_norm2_train_target,k=5))
knnmodel
# Validation
#Validasi Menggunakan Confussion Matrix
confknn <- table(df_norm2_test_target$alamat_rumah, knnmodel)
confknn
# akurasi
acck <- mean(knnmodel==df_norm2_test_target$alamat_rumah)
acck
#Membuat KNN-Model dengan Nilai K=3
knnmodel <-knn(train=df_norm2_train,test=df_norm2_test,
cl=as.matrix(df_norm2_train_target,k=2))
knnmodel
df_clean <- mutate_if(df_clean, is.factor, as.numeric)
#Membuat fungsi Normalisasi
normalize<-function(x){
temp<-(x-min(x))/(max(x)-min(x))
return(temp)
}
#Melakukan Normalisasi
df_norm<-as.data.frame(lapply(df_clean[,-1],normalize))
df_norm2<-bind_cols(df_clean[,1],df_norm)
df_norm2
#Membagi ke Data Train dan Data Testing
index_train <- sample(1:nrow(df_norm2), 0.7 * nrow(df_norm2))
df_norm2_train <- df_norm2[index_train, ]
df_norm2_test <- df_norm2[-index_train, ]
#Mengambil Label
df_norm2_train_target<-df_norm2_train[ ,1]
df_norm2_test_target<-df_norm2_test[ ,1]
#Membuat KNN-Model dengan Nilai K=3
knnmodel <-knn(train=df_norm2_train,test=df_norm2_test,
cl=as.matrix(df_norm2_train_target,k=2))
knnmodel
# Validation
#Validasi Menggunakan Confussion Matrix
confknn <- table(df_norm2_test_target$alamat_rumah, knnmodel)
confknn
# akurasi
acck <- mean(knnmodel==df_norm2_test_target$alamat_rumah)
acck
#Melakukan Normalisasi
df_norm<-as.data.frame(lapply(df_clean[,-1],normalize))
df_norm2<-bind_cols(df_clean[,1],df_norm)
df_norm2
#Membagi ke Data Train dan Data Testing
index_train <- sample(1:nrow(df_norm2), 0.7 * nrow(df_norm2))
df_norm2_train <- df_norm2[index_train, ]
df_norm2_test <- df_norm2[-index_train, ]
#Mengambil Label
df_norm2_train_target<-df_norm2_train[ ,1]
df_norm2_test_target<-df_norm2_test[ ,1]
#Membagi ke Data Train dan Data Testing
index_train <- sample(1:nrow(df_norm2), 0.7 * nrow(df_norm2))
df_norm2_train <- df_norm2[index_train, -1]
df_norm2_test <- df_norm2[-index_train, -1]
#Mengambil Label
df_norm2_train_target<-df_norm2_train[index_train ,1]
df_norm2_test_target<-df_norm2_test[-index_train ,1]
#Membuat KNN-Model dengan Nilai K=3
knnmodel <-knn(train=df_norm2_train,test=df_norm2_test,
cl=as.matrix(df_norm2_train_target,k=2))
df_norm2_test
df_norm2_train_target
index_train <- sample(1:nrow(df_norm2), 0.7 * nrow(df_norm2))
df_norm2_train <- df_norm2[index_train, -1]
df_norm2_test <- df_norm2[-index_train, -1]
#Mengambil Label
df_norm2_train_target<-df_norm2[index_train ,1]
df_norm2_test_target<-df_norm2[-index_train ,1]
#Membuat KNN-Model dengan Nilai K=3
knnmodel <-knn(train=df_norm2_train,test=df_norm2_test,
cl=as.matrix(df_norm2_train_target,k=2))
knnmodel
# Validation
#Validasi Menggunakan Confussion Matrix
confknn <- table(df_norm2_test_target$alamat_rumah, knnmodel)
confknn
# akurasi
acck <- mean(knnmodel==df_norm2_test_target$alamat_rumah)
acck
acct
accnb
acck
confknn
11+13+2+7+17
50/nrow(df_norm2_test_target)
prp(tree)
prp(tree)
par(mfrow=c(1,1))
prp(tree)
#Memvisualisasikan Decison Tree dengan lebih informatif
fancyRpartPlot(tree)
prp(tree)
library(e1071)
install.packages("e1071")
library(e1071)
library(tree)
install.packages("tree")
??confusionMatrix
install.packages("caret")
library(caret)
library(caret)
#confusion matrix lengkap
confusionMatrix(pred_dt, test$alamat_rumah)
source('D:/EnvStat/mlearn-capstone/script/003_studi-kasus-lamudi.R', echo=TRUE)
#confusion matrix lengkap
confusionMatrix(pred_dt, test$alamat_rumah)
#confusion matrix lengkap
confusionMatrix(pred_nb, test$alamat_rumah)
accnb
#confusion matrix lengkap
confusionMatrix(knnmodel, test$alamat_rumah)
test$alamat_rumah
knnmodel
#Membuat fungsi Normalisasi
normalize<-function(x){
temp<-(x-min(x))/(max(x)-min(x))
return(temp)
}
#Melakukan Normalisasi
df_norm<-as.data.frame(lapply(df_clean[,-1],normalize))
df_norm2<-bind_cols(df_clean[,1],df_norm)
df_norm2
#Membagi ke Data Train dan Data Testing
index_train <- sample(1:nrow(df_norm2), 0.7 * nrow(df_norm2))
df_norm2_train <- df_norm2[index_train, -1]
df_norm2_test <- df_norm2[-index_train, -1]
#Mengambil Label
df_norm2_train_target<-df_norm2[index_train ,1]
df_norm2_test_target<-df_norm2[-index_train ,1]
#Membuat KNN-Model dengan Nilai K=3
knnmodel <-knn(train=df_norm2_train,test=df_norm2_test,
cl=as.matrix(df_norm2_train_target,k=2))
knnmodel
# Validation
#Validasi Menggunakan Confussion Matrix
confknn <- table(df_norm2_test_target$alamat_rumah, knnmodel)
confknn
#confusion matrix lengkap
confusionMatrix(knnmodel, test$alamat_rumah)
#confusion matrix lengkap
confusionMatrix(knnmodel, df_norm2_test_target$alamat_rumah)
#confusion matrix lengkap
confusionMatrix(knnmodel, df_norm2_test_target$alamat_rumah)
#confusion matrix lengkap
confusionMatrix(knnmodel, df_norm2_test_target$alamat_rumah)
#confusion matrix lengkap
confusionMatrix(knnmodel,
as.factor(df_norm2_test_target$alamat_rumah))
library(tidyverse)
library(cluster)
library(factoextra)
install.packages("factoextra")
library(factoextra)
library(skimr)
library(factoextra)
# import data
df <- read_csv("./data-raw/004_hdi.csv")
glimpse(df)
skim(df)
df
# visualisasi data
ggplot(df, aes(hdi,revenue))+
geom_point()+
theme_classic()
ggplot(df, aes(hdi,revenue))+
geom_point()
# visualisasi data
ggplot(df, aes(x=hdi,y=revenue))+
geom_point()+
theme_classic()
library(tidyverse)
# visualisasi data
ggplot(df, aes(x=hdi,y=revenue))+
geom_point()+
theme_classic()
#Lakukan Standarisasi dan assign ke variable baru dengan nama "dfnorm".
dfnorm <- scale(df[,3:4])
skim(as.data.frame(dfnorm))
#Melihat 10 data teratas pada dataset yang telah dinormalisasi
head(dfnorm, 10)
#Menggabungkan label
dfnorm2 <- bind_cols(dfnorm, df$kota, dfnorm)
?bind_cols
#Menggabungkan label
dfnorm2 <- bind_cols(df$kota, dfnorm)
#Menggabungkan label
dfnorm2 <- bind_cols(kota=df$kota, dfnorm)
#Menggabungkan label
dfnorm2 <- bind_cols(kota=df$kota, dfnorm, id=NULL)
#Menggabungkan label
dfnorm2 <- bind_cols(df$kota, dfnorm, id=NULL)
dfnorm2
#Menggabungkan label
dfnorm2 <- bind_cols(df[,1], dfnorm)
#Menggabungkan label
dfnorm2 <- bind_cols(df[,1], dfnorm[,1:2])
#Menggabungkan label
dfnorm2 <- bind_cols(df[,1], dfnorm[,1:2])
#Menggabungkan label
dfnorm2 <- bind_cols(list(df[,1], dfnorm[,1:2]))
#Menggabungkan label
dfnorm2 <- cbind(df[,1], dfnorm[,1:2])
dfnorm2 <- as_tibble(dfnorm2)
dfnorm2
#Menhitung Ditance Matrix menggunakan fungsi get_distance()
distance <- get_dist(dfnorm2, method = "euclidean" )
#Menhitung Ditance Matrix menggunakan fungsi get_distance()
distance <- get_dist(dfnorm2, method = "euclidean" )
#Memvisualisasikan Distance Matrix menggunakan fungsi fviz_dist()
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#Menhitung Ditance Matrix menggunakan fungsi get_distance()
distance <- get_dist(dfnorm2, method = "euclidean" )
#Memvisualisasikan Distance Matrix menggunakan fungsi fviz_dist()
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(tidyverse)
library(gridExtra)
daftar_file <- list.files(path="./data-raw", pattern="001", full.names=TRUE)
daftar_file
df <- map_dfc(daftar_file, read_csv)
df
df
library(skimr)
# data cleaning
df_clean <- df %>% select(hari_promosi, contains("jumlah"))
# print hasil
df_clean
# cek
glimpse(df_clean)
# ringkasan data disertai pengecekan missing data
skim(df_clean)
theme_set(theme_classic())
pengguna <- ggplot(df_clean, aes(hari_promosi, jumlah_pengguna))+
geom_line(color="#00AFBB")+
geom_smooth(method="lm")+
labs(title="Grafik Jumlah Pengguna Promosi",
x="hari promosi", y="jumlah pengguna")
komplain <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain))+
geom_line(color="#E7B800")+
geom_smooth(method="lm")+
labs(title="Grafik Jumlah Komplain Pengguna Hari Promosi",
x="hari promosi", y="jumlah komplain")
keuntungan <- ggplot(df_clean, aes(hari_promosi, jumlah_keuntungan))+
geom_line(color="#FC4E07")+
geom_smooth(method="lm")+
labs(title="Grafik Jumlah Keuntungan Hari Promosi",
x="hari promosi", y="jumlah keuntungan")
grid.arrange(pengguna, komplain, keuntungan, nrow=2)
theme_set(theme_classic())
pengguna <- ggplot(df_clean, aes(hari_promosi, jumlah_pengguna))+
geom_line(color="#00AFBB")+
geom_smooth()+
labs(title="Grafik Jumlah Pengguna Promosi",
x="hari promosi", y="jumlah pengguna")
komplain <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain))+
geom_line(color="#E7B800")+
geom_smooth()+
labs(title="Grafik Jumlah Komplain Pengguna Hari Promosi",
x="hari promosi", y="jumlah komplain")
keuntungan <- ggplot(df_clean, aes(hari_promosi, jumlah_keuntungan))+
geom_line(color="#FC4E07")+
geom_smooth()+
labs(title="Grafik Jumlah Keuntungan Hari Promosi",
x="hari promosi", y="jumlah keuntungan")
grid.arrange(pengguna, komplain, keuntungan, nrow=2)
theme_set(theme_classic())
pengguna <- ggplot(df_clean, aes(hari_promosi, jumlah_pengguna))+
geom_line(color="#00AFBB")+
geom_smooth()+
labs(title="Grafik Jumlah Pengguna",
x="hari promosi", y="jumlah pengguna")
komplain <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain))+
geom_line(color="#E7B800")+
geom_smooth()+
labs(title="Grafik Jumlah Komplain Pengguna",
x="hari promosi", y="jumlah komplain")
keuntungan <- ggplot(df_clean, aes(hari_promosi, jumlah_keuntungan))+
geom_line(color="#FC4E07")+
geom_smooth()+
labs(title="Grafik Jumlah Keuntungan",
x="hari promosi", y="jumlah keuntungan")
grid.arrange(pengguna, komplain, keuntungan, nrow=2)
theme_set(theme_classic())
pengguna <- ggplot(df_clean, aes(hari_promosi, jumlah_pengguna))+
geom_line(color="#00AFBB")+
geom_smooth()+
labs(title="Grafik Jumlah Pengguna",
x="hari promosi", y="jumlah pengguna")
komplain <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain))+
geom_line(color="#E7B800")+
geom_smooth()+
labs(title="Grafik Jumlah Komplain Pengguna",
x="hari promosi", y="jumlah komplain")
keuntungan <- ggplot(df_clean, aes(hari_promosi, jumlah_keuntungan))+
geom_line(color="#FC4E07")+
geom_smooth()+
labs(title="Grafik Jumlah Keuntungan",
x="hari promosi", y="jumlah keuntungan")
rasio <- komplain <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain/jumlah_pengguna))+
geom_line(color="black")+
geom_smooth()+
labs(title="Grafik Rsio Jumlah Komplain dan Pengguna",
x="hari promosi", y="jumlah komplain/jumlah pengguna")
grid.arrange(pengguna, komplain, keuntungan, nrow=2)
theme_set(theme_classic())
pengguna <- ggplot(df_clean, aes(hari_promosi, jumlah_pengguna))+
geom_line(color="#00AFBB")+
geom_smooth()+
labs(title="Grafik Jumlah Pengguna",
x="hari promosi", y="jumlah pengguna")
komplain <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain))+
geom_line(color="#E7B800")+
geom_smooth()+
labs(title="Grafik Jumlah Komplain Pengguna",
x="hari promosi", y="jumlah komplain")
keuntungan <- ggplot(df_clean, aes(hari_promosi, jumlah_keuntungan))+
geom_line(color="#FC4E07")+
geom_smooth()+
labs(title="Grafik Jumlah Keuntungan",
x="hari promosi", y="jumlah keuntungan")
rasio <- komplain <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain/jumlah_pengguna))+
geom_line(color="black")+
geom_smooth()+
labs(title="Grafik Rsio Jumlah Komplain dan Pengguna",
x="hari promosi", y="jumlah komplain/jumlah pengguna")
grid.arrange(pengguna, komplain, keuntungan, rasio, nrow=2)
komplain <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain/jumlah_pengguna))+
geom_line(color="black")+
geom_smooth()+
labs(title="Grafik Rasio Jumlah Komplain dan Pengguna",
x="hari promosi", y="jumlah komplain/jumlah pengguna")
theme_set(theme_classic())
pengguna <- ggplot(df_clean, aes(hari_promosi, jumlah_pengguna))+
geom_line(color="#00AFBB")+
geom_smooth()+
labs(title="Grafik Jumlah Pengguna",
x="hari promosi", y="jumlah pengguna")
komplain <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain))+
geom_line(color="#E7B800")+
geom_smooth()+
labs(title="Grafik Jumlah Komplain Pengguna",
x="hari promosi", y="jumlah komplain")
keuntungan <- ggplot(df_clean, aes(hari_promosi, jumlah_keuntungan))+
geom_line(color="#FC4E07")+
geom_smooth()+
labs(title="Grafik Jumlah Keuntungan",
x="hari promosi", y="jumlah keuntungan")
rasio <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain/jumlah_pengguna))+
geom_line(color="black")+
geom_smooth()+
labs(title="Grafik Rasio Jumlah Komplain dan Pengguna",
x="hari promosi", y="jumlah komplain/jumlah pengguna")
grid.arrange(pengguna, komplain, keuntungan, rasio, nrow=2)
theme_set(theme_classic())
pengguna <- ggplot(df_clean, aes(hari_promosi, jumlah_pengguna))+
geom_line(color="#00AFBB")+
geom_smooth()+
labs(title="Jumlah Pengguna",
x="hari promosi", y="jumlah pengguna")
komplain <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain))+
geom_line(color="#E7B800")+
geom_smooth()+
labs(title="umlah Komplain Pengguna",
x="hari promosi", y="jumlah komplain")
keuntungan <- ggplot(df_clean, aes(hari_promosi, jumlah_keuntungan))+
geom_line(color="#FC4E07")+
geom_smooth()+
labs(title="Jumlah Keuntungan",
x="hari promosi", y="jumlah keuntungan")
rasio <- ggplot(df_clean, aes(hari_promosi, jumlah_komplain/jumlah_pengguna))+
geom_line(color="black")+
geom_smooth()+
labs(title="Rasio Jumlah Komplain dan Pengguna",
x="hari promosi", y="jumlah komplain/pengguna")
grid.arrange(pengguna, komplain, keuntungan, rasio, nrow=2)
par(mfrow=c(2,2))
# model pengguna
mod_pengguna <- lm(jumlah_pengguna~hari_promosi, data=df_clean)
summary(mod_pengguna)
# residual analysis
plot(mod_pengguna)
# proyeksi jumlah pengguna
predict(mod_pengguna, newdata=data.frame(hari_promosi=c(130,150,200)),
interval="confidence")
# model komplain
mod_komplain <- lm(log10(jumlah_komplain)~hari_promosi, data=df_clean)
summary(mod_komplain)
# residual analysis
plot(mod_komplain)
# proyeksi jumlah komplain
predict(mod_komplain, newdata=data.frame(hari_promosi=c(130,150,200)),
interval="confidence")^10
# model komplain
mod_komplain <- lm(log10(jumlah_komplain)~hari_promosi, data=df_clean)
summary(mod_komplain)
# residual analysis
par(mfrow=c(2,2))
plot(mod_komplain)
# proyeksi jumlah komplain
predict(mod_komplain, newdata=data.frame(hari_promosi=c(130,150,200)),
interval="confidence")^10
# model keuntungan
mod_keuntungan <- lm(jumlah_keuntungan~poly(hari_promosi,2), data=df_clean)
summary(mod_keuntungan)
# residual analysis
par(mfrow=c(2,2))
plot(mod_keuntungan)
# proyeksi jumlah keuntungan
predict(mod_keuntungan, newdata=data.frame(hari_promosi=c(130,150,200)),
interval="confidence")
blogdown:::serve_site()
bookdown:::mathquill()
# model keuntungan
mod_keuntungan <- lm(jumlah_keuntungan~poly(hari_promosi,2), data=df_clean)
summary(mod_keuntungan)
# residual analysis
par(mfrow=c(2,2))
plot(mod_keuntungan)
# proyeksi jumlah keuntungan
predict(mod_keuntungan, newdata=data.frame(hari_promosi=c(130,150,200)),
interval="confidence")
bookdown:::mathquill()
# data cleaning
df_clean <- df %>% select(hari_promosi, contains("jumlah"))
# print hasil
df_clean
# cek
glimpse(df_clean)
# ringkasan data disertai pengecekan missing data
skim(df_clean)
# data cleaning
df_clean <-df[,-c(3,5)]
# print hasil
df_clean
# cek
glimpse(df_clean)
# ringkasan data disertai pengecekan missing data
skim(df_clean)
# data cleaning
df_clean <-df[,-c(3,5)]
# print hasil
head(df_clean)
# cek
glimpse(df_clean)
# ringkasan data disertai pengecekan missing data
skim(df_clean)
# data cleaning
df_clean <-df[,-c(3,5)]
# print hasil
head(df_clean)
# cek
glimpse(df_clean)
# ringkasan data
summary(df_clean)
install.packages(c("blogdown", "bookdown", "digest", "dplyr", "DT", "forecast", "fs", "ggthemes", "jcolors", "knitr", "lmtest", "oompaBase", "pillar", "processx", "progress", "quadprog", "rcmdcheck", "RcppArmadillo", "reprex", "rmarkdown", "rticles", "rvest", "snakecase", "svglite", "tinytex", "xfun", "zip"))
install.packages(c("blogdown", "bookdown", "digest", "dplyr", "DT", "forecast", "fs", "ggthemes", "jcolors", "knitr", "lmtest", "oompaBase", "pillar", "processx", "progress", "quadprog", "rcmdcheck", "RcppArmadillo", "reprex", "rmarkdown", "rticles", "rvest", "snakecase", "svglite", "tinytex", "xfun", "zip"))
install.packages(c("blogdown", "bookdown", "digest", "dplyr", "DT", "forecast", "fs", "ggthemes", "jcolors", "knitr", "lmtest", "oompaBase", "pillar", "processx", "progress", "quadprog", "rcmdcheck", "RcppArmadillo", "reprex", "rmarkdown", "rticles", "rvest", "snakecase", "svglite", "tinytex", "xfun", "zip"))
